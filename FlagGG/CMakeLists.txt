include (${CMAKE_CURRENT_SOURCE_DIR}/../CMake/ThirdParty.cmake)

# Define target name
set (TARGET_NAME FlagGG)
set (LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../bin)
list (APPEND TARGET_PROPERTIES FOLDER "Engine")

setup_lint ()

add_definitions (-DFlagGG_EXPORTS)

include_directories (${CMAKE_CURRENT_SOURCE_DIR})
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/../3rd)
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/../3rd/PhysX/physx/include)
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/../3rd/PhysX/pxshared/include)
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/../3rd/mimalloc/include)
include_directories (${CMAKE_CURRENT_SOURCE_DIR}/../3rd/yoga)
message ("include dir: ${CMAKE_CURRENT_SOURCE_DIR}")

# 不用boost
if (FLAGGG_NO_BOOST)
	add_definitions (-DFLAGGG_NO_BOOST)
endif ()
if (FLAGGG_PHYSICS)
    add_definitions (-DFLAGGG_PHYSICS)
endif ()
if (FLAGGG_D3D11)
    add_definitions (-DFLAGGG_D3D11=1)
else ()
    list (APPEND EXCLUDED_SOURCE_DIRS GfxDevice/D3D11)
endif ()
if (FLAGGG_OPENGL)
    add_definitions (-DFLAGGG_OPENGL=1)
    add_definitions (-DHAS_OPENGL_LIB=1)
else ()
    list (APPEND EXCLUDED_SOURCE_DIRS GfxDevice/OpenGL)
endif ()
if (FLAGGG_VULKAN)
    add_definitions (-DFLAGGG_VULKAN=1)
else ()
    list (APPEND EXCLUDED_SOURCE_DIRS GfxDevice/Vulkan)
endif ()
list (APPEND EXCLUDED_SOURCE_DIRS spdlog)
if (FLAGGG_METAL)
    add_definitions (-DFLAGGG_METAL=1)
else ()
    list (APPEND EXCLUDED_SOURCE_DIRS GfxDevice/Metal)
endif ()
if (FLAGGG_JOLT)
    add_definitions (-DFLAGGG_JOLT=1)
else ()
    list (APPEND EXCLUDED_SOURCE_DIRS Physics/JoltPhysics)
endif ()
if (FLAGGG_PHYSX)
    add_definitions (-DFLAGGG_PHYSX=1)
else ()
    list (APPEND EXCLUDED_SOURCE_DIRS Physics/PhysX)
endif ()
if (NOT FLAGGG_CSHARP_MODULE)
    list (APPEND EXCLUDED_SOURCE_DIRS "CSharpExport")
endif ()
# 输出排除的目录
message ("exclude folder: ${EXCLUDED_SOURCE_DIRS}")
string (REPLACE ";" "/[^;]+;" EXCLUDE_PATTERNS "${EXCLUDED_SOURCE_DIRS};")
# define_source_files这个宏定义在Common.cmake
define_source_files (EXCLUDE_PATTERNS ${EXCLUDE_PATTERNS} RECURSE GROUP)

# setup_library (STATIC) 表示静态库(win上*.lib，linux上*.a)
# setup_library (SHARED) 表示动态库(win上*.dll，linux上*.os)
# setup_main_executable() 表示可执行文件
# setup_main_executable ()
if (FLAGGG_LIB_TYPE STREQUAL SHARED)
    setup_library (SHARED)
else()
    setup_library (STATIC)
endif()

message ("boost lib: ${BOOST_LIB}")
message ("d3d11 lib: ${D3D11_LIB}")
message ("lua lib: ${LUA_LIB}")
message ("SLikeNet lib: ${SLikeNet_LIB}")
message ("PugiXml lib: ${PUGIXML_LIB}")

if (NOT FLAGGG_NO_BOOST)
	list (APPEND THIRD_LIB ${BOOST_LIB})
endif ()
if (FLAGGG_D3D11)
    list (APPEND THIRD_LIB ${D3D11_LIB})
    list (APPEND THIRD_LIB GFSDK_SSAO_D3D11.win64)
endif ()
if (FLAGGG_OPENGL)
    list (APPEND THIRD_LIB ${OPENGL_LIB})
endif ()
if (FLAGGG_VULKAN)
    list (APPEND THIRD_LIB ${VULKAN_LIB})
endif ()
if (FLAGGG_METAL)
    list (APPEND THIRD_LIB mtlpp)
endif ()
list (APPEND THIRD_LIB ${LUA_LIB})
list (APPEND THIRD_LIB ${SLikeNet_LIB})
# list (APPEND THIRD_LIB jemallocso)
# list (APPEND THIRD_LIB $(BDFX_LIB))
list (APPEND THIRD_LIB ${PUGIXML_LIB})
list (APPEND THIRD_LIB hlslcc)
list (APPEND THIRD_LIB mimalloc-static)
list (APPEND THIRD_LIB yogacore)
if (FLAGGG_VULKAN)
    list (APPEND THIRD_LIB glslang spirv-tools spirv-reflect-lib)
endif ()

target_link_libraries(${TARGET_NAME} ${THIRD_LIB})

# Setup test cases
setup_test ()

