//
// 图形相关类型的定义
//

#pragma once

#include "Export.h"
#include "Container/StringHash.h"
#include "Core/BaseTypes.h"

enum PrimitiveType
{
	PRIMITIVE_TRIANGLE	= 0,
	PRIMITIVE_LINE,
};

enum ShaderType
{
	None = 0,
	VS = 1,
	PS = 2
};

enum TextureClass : UInt32
{
	TEXTURE_CLASS_UNIVERSAL = 0,
	TEXTURE_CLASS_DIFFUSE,
	TEXTURE_CLASS_NORMAL,
	TEXTURE_CLASS_SPECULAR,
	TEXTURE_CLASS_EMISSIVE,
	TEXTURE_CLASS_ENVIRONMENT,
	TEXTURE_CLASS_SHADOWMAP,
	MAX_TEXTURE_CLASS
};

enum TextureFormat : UInt32
{
	TEXTURE_FORMAT_BC1,          // DXT1 R5G6B5A1
	TEXTURE_FORMAT_BC2,          // DXT3 R5G6B5A4
	TEXTURE_FORMAT_BC3,          // DXT5 R5G6B5A8
	TEXTURE_FORMAT_BC4,          // LATC1/ATI1 R8
	TEXTURE_FORMAT_BC5,          // LATC2/ATI2 RG8
	TEXTURE_FORMAT_BC6H,         // BC6H RGB16F
	TEXTURE_FORMAT_BC7,          // BC7 RGB 4-7 bits per color channel, 0-8 bits alpha
	TEXTURE_FORMAT_ETC1,         // ETC1 RGB8
	TEXTURE_FORMAT_ETC2,         // ETC2 RGB8
	TEXTURE_FORMAT_ETC2A,        // ETC2 RGBA8
	TEXTURE_FORMAT_ETC2A1,       // ETC2 RGB8A1
	TEXTURE_FORMAT_PTC12,        // PVRTC1 RGB 2BPP
	TEXTURE_FORMAT_PTC14,        // PVRTC1 RGB 4BPP
	TEXTURE_FORMAT_PTC12A,       // PVRTC1 RGBA 2BPP
	TEXTURE_FORMAT_PTC14A,       // PVRTC1 RGBA 4BPP
	TEXTURE_FORMAT_PTC22,        // PVRTC2 RGBA 2BPP
	TEXTURE_FORMAT_PTC24,        // PVRTC2 RGBA 4BPP
	TEXTURE_FORMAT_ATC,          // ATC RGB 4BPP
	TEXTURE_FORMAT_ATCE,         // ATCE RGBA 8 BPP explicit alpha
	TEXTURE_FORMAT_ATCI,         // ATCI RGBA 8 BPP interpolated alpha
	TEXTURE_FORMAT_ASTC4x4,      // ASTC 4x4 8.0 BPP
	TEXTURE_FORMAT_ASTC5x5,      // ASTC 5x5 5.12 BPP
	TEXTURE_FORMAT_ASTC6x6,      // ASTC 6x6 3.56 BPP
	TEXTURE_FORMAT_ASTC8x5,      // ASTC 8x5 3.20 BPP
	TEXTURE_FORMAT_ASTC8x6,      // ASTC 8x6 2.67 BPP
	TEXTURE_FORMAT_ASTC10x5,     // ASTC 10x5 2.56 BPP

	TEXTURE_FORMAT_UNKNOWN,      // Compressed formats above.

	TEXTURE_FORMAT_R1,
	TEXTURE_FORMAT_A8,
	TEXTURE_FORMAT_R8,
	TEXTURE_FORMAT_R8I,
	TEXTURE_FORMAT_R8U,
	TEXTURE_FORMAT_R8S,
	TEXTURE_FORMAT_R16,
	TEXTURE_FORMAT_R16I,
	TEXTURE_FORMAT_R16U,
	TEXTURE_FORMAT_R16F,
	TEXTURE_FORMAT_R16S,
	TEXTURE_FORMAT_R32I,
	TEXTURE_FORMAT_R32U,
	TEXTURE_FORMAT_R32F,
	TEXTURE_FORMAT_RG8,
	TEXTURE_FORMAT_RG8I,
	TEXTURE_FORMAT_RG8U,
	TEXTURE_FORMAT_RG8S,
	TEXTURE_FORMAT_RG16,
	TEXTURE_FORMAT_RG16I,
	TEXTURE_FORMAT_RG16U,
	TEXTURE_FORMAT_RG16F,
	TEXTURE_FORMAT_RG16S,
	TEXTURE_FORMAT_RG32I,
	TEXTURE_FORMAT_RG32U,
	TEXTURE_FORMAT_RG32F,
	TEXTURE_FORMAT_RGB8,
	TEXTURE_FORMAT_RGB8I,
	TEXTURE_FORMAT_RGB8U,
	TEXTURE_FORMAT_RGB8S,
	TEXTURE_FORMAT_RGB9E5F,
	TEXTURE_FORMAT_BGRA8,
	TEXTURE_FORMAT_RGBA8,
	TEXTURE_FORMAT_RGBA8I,
	TEXTURE_FORMAT_RGBA8U,
	TEXTURE_FORMAT_RGBA8S,
	TEXTURE_FORMAT_RGBA16,
	TEXTURE_FORMAT_RGBA16I,
	TEXTURE_FORMAT_RGBA16U,
	TEXTURE_FORMAT_RGBA16F,
	TEXTURE_FORMAT_RGBA16S,
	TEXTURE_FORMAT_RGBA32I,
	TEXTURE_FORMAT_RGBA32U,
	TEXTURE_FORMAT_RGBA32F,
	TEXTURE_FORMAT_R5G6B5,
	TEXTURE_FORMAT_RGBA4,
	TEXTURE_FORMAT_RGB5A1,
	TEXTURE_FORMAT_RGB10A2,
	TEXTURE_FORMAT_RG11B10F,

	TEXTURE_FORMAT_UNKNOWN_DEPTH, // Depth formats below.

	TEXTURE_FORMAT_D16,
	TEXTURE_FORMAT_D24,
	TEXTURE_FORMAT_D24S8,
	TEXTURE_FORMAT_D32,
	TEXTURE_FORMAT_D16F,
	TEXTURE_FORMAT_D24F,
	TEXTURE_FORMAT_D32F,
	TEXTURE_FORMAT_D0S8,

	MAX_TEXTURE_FORMAT
};

enum TextureEncodingType : UInt8
{
	TEXTURE_ENCODING_UNORM,
	TEXTURE_ENCODING_INT,
	TEXTURE_ENCODING_UINT,
	TEXTURE_ENCODING_FLOAT,
	TEXTURE_ENCODING_SNORM,
	MAX_TEXTURE_ENCODING_TYPE,
};

enum TextureFilterMode : UInt8
{
	TEXTURE_FILTER_NEAREST = 0,
	TEXTURE_FILTER_BILINEAR,
	TEXTURE_FILTER_TRILINEAR,
	TEXTURE_FILTER_ANISOTROPIC,
	TEXTURE_FILTER_NEAREST_ANISOTROPIC,
	TEXTURE_FILTER_DEFAULT,
	MAX_TEXTURE_FILTERMODES
};

enum TextureCoordinate : UInt8
{
	TEXTURE_COORDINATE_U = 0,
	TEXTURE_COORDINATE_V,
	TEXTURE_COORDINATE_W,
	MAX_TEXTURE_COORDINATE,
};

enum TextureAddressMode : UInt8
{
	TEXTURE_ADDRESS_WRAP = 0,
	TEXTURE_ADDRESS_MIRROR,
	TEXTURE_ADDRESS_CLAMP,
	TEXTURE_ADDRESS_BORDER,
	MAX_TEXTURE_ADDRESSMODES
};

enum ComparisonFunc : UInt8
{
	COMPARISON_NEVER = 0,
	COMPARISON_LESS,
	COMPARISON_EQUAL,
	COMPARISON_LESS_EQUAL,
	COMPARISON_GREATER,
	COMPARISON_NOT_EQUAL,
	COMPARISON_GREATER_EQUAL,
	COMPARISON_ALWAYS,
};

enum CubeMapFace
{
	FACE_POSITIVE_X = 0,
	FACE_NEGATIVE_X,
	FACE_POSITIVE_Y,
	FACE_NEGATIVE_Y,
	FACE_POSITIVE_Z,
	FACE_NEGATIVE_Z,
	MAX_CUBEMAP_FACES
};

enum RenderPassType : UInt32
{
	RENDER_PASS_TYPE_SHADOW = 0,
	RENDER_PASS_TYPE_FORWARD_LIT,
	RENDER_PASS_TYPE_DEFERRED_BASE,
	RENDER_PASS_TYPE_DEFERRED_LIT,
	MAX_RENDER_PASS_TYPE,
};

enum MaterialQuality : UInt32
{
	QUALITY_LOW = 0,
	QUALITY_MEDIUM = 1,
	QUALITY_HIGH = 2,
	QUALITY_MAX = 15,
};

enum VertexElementType
{
	VE_INT = 0,
	VE_FLAOT,
	VE_VECTOR2,
	VE_VECTOR3,
	VE_VECTOR4,
	VE_UBYTE4,
	VE_UBYTE4_UNORM,
	MAX_VERTEX_ELEMENT_TYPE
};

enum VertexElementSemantic
{
	SEM_POSITION = 0,
	SEM_NORMAL,
	SEN_BINORMAL,
	SEM_TANGENT,
	SEM_TEXCOORD,
	SEM_COLOR,
	SEM_BLEND_WEIGHTS,
	SEM_BLEND_INDICES,
	SEM_OBJECT_INDEX,
	MAX_VERTEX_ELEMENT_SEMANTIC
};

enum GeometryType : UInt32
{
	GEOMETRY_STATIC = 0,
	GEOMETRY_SKINNED,
	GEOMETRY_INSTANCE,
	GEOMETRY_BILLBOARD,
};

enum FillMode
{
	FILL_WIREFRAME = 0,
	FILL_SOLID,
};

enum CullMode
{
	CULL_NONE = 0,
	CULL_FRONT,
	CULL_BACK,
};

enum BlendMode
{
	BLEND_REPLACE = 0,
	BLEND_ADD,
	BLEND_ALPHA,
	BLEND_ALPHA_ADD,
};

enum BufferBind : UInt8
{
	BUFFER_BIND_VERTEX  = 0x1,
	BUFFER_BIND_INDEX   = 0x2,
	BUFFER_BIND_UNIFORM = 0x4,
};

enum BufferAccess : UInt8
{
	BUFFER_ACCESS_NONE  = 0,
	BUFFER_ACCESS_WRITE = 0x1,
	BUFFER_ACCESS_READ  = 0x2,
};

enum BufferUsage : UInt8
{
	BUFFER_USAGE_STATIC = 0,
	BUFFER_USAGE_DYNAMIC,
};

enum TextureUsage
{
	TEXTURE_STATIC = 0,
	TEXTURE_DYNAMIC,
	TEXTURE_RENDERTARGET,
	TEXTURE_DEPTHSTENCIL
};

struct FlagGG_API VertexElement
{
	VertexElement();

	VertexElement(VertexElementType vertexElementType, VertexElementSemantic vertexElementSemantic, UInt8 index = 0, bool perInstance = false);

	bool operator ==(const VertexElement& rhs) const
	{
		return vertexElementType_ == rhs.vertexElementType_ &&
			vertexElementSemantic_ == rhs.vertexElementSemantic_ &&
			index_ == rhs.index_ &&
			perInstance_ == rhs.perInstance_;
	}

	bool operator !=(const VertexElement& rhs) const { return !(*this == rhs); }

	VertexElementType		vertexElementType_;
	VertexElementSemantic	vertexElementSemantic_;
	UInt8					index_;
	bool					perInstance_;
	UInt32					offset_;
};

struct FlagGG_API RasterizerState
{
	bool scissorTest_{ false };
	FillMode fillMode_{ FILL_SOLID };
	CullMode cullMode_{ CULL_NONE };
	BlendMode blendMode_{ BLEND_REPLACE };

	UInt32 GetHash() const;
};

struct FlagGG_API DepthStencilState
{
	bool depthWrite_{ true };
	ComparisonFunc depthTestMode_{ COMPARISON_ALWAYS };

	bool stencilTest_{ false };
	UInt8 stencilRef_{};
	UInt8 stencilReadMask_{};
	UInt8 stencilWriteMask_{};
	ComparisonFunc stencilTestMode_{ COMPARISON_ALWAYS };

	UInt32 GetHash() const;
};

extern FlagGG_API UInt32 VERTEX_ELEMENT_TYPE_SIZE[MAX_VERTEX_ELEMENT_TYPE];

extern FlagGG_API const char* VERTEX_ELEMENT_SEM_NAME[MAX_VERTEX_ELEMENT_SEMANTIC];

enum
{
	MAX_DEFAULT_VERTEX_ELEMENT = 14,
	MAX_VERTEX_BUFFER_COUNT = 5,
	MAX_CONST_BUFFER_COUNT = 5,
};

extern FlagGG_API VertexElement DEFAULT_VERTEX_ELEMENT[MAX_DEFAULT_VERTEX_ELEMENT];

extern FlagGG_API const FlagGG::StringHash SP_WORLD_MATRIX;
extern FlagGG_API const FlagGG::StringHash SP_VIEW_MATRIX;
extern FlagGG_API const FlagGG::StringHash SP_PROJVIEW_MATRIX;
extern FlagGG_API const FlagGG::StringHash SP_SKIN_MATRICES;
extern FlagGG_API const FlagGG::StringHash SP_DELTA_TIME;
extern FlagGG_API const FlagGG::StringHash SP_ELAPSED_TIME;
extern FlagGG_API const FlagGG::StringHash SP_CAMERA_POS;
extern FlagGG_API const FlagGG::StringHash SP_LIGHT_POS;
extern FlagGG_API const FlagGG::StringHash SP_LIGHT_DIR;
extern FlagGG_API const FlagGG::StringHash SP_LIGHT_VIEW_MATRIX;
extern FlagGG_API const FlagGG::StringHash SP_LIGHT_PROJVIEW_MATRIX;
extern FlagGG_API const FlagGG::StringHash SP_SHADOWMAP_PIXEL_TEXELS;

extern FlagGG_API const UInt32 DRAWABLE_UNDEFINED;
extern FlagGG_API const UInt32 DRAWABLE_GEOMETRY;
extern FlagGG_API const UInt32 DRAWABLE_LIGHT;
extern FlagGG_API const UInt32 DRAWABLE_PROBE;
extern FlagGG_API const UInt32 DRAWABLE_ANY;
extern FlagGG_API const UInt32 DEFAULT_VIEWMASK;
extern FlagGG_API const UInt32 DEFAULT_LIGHTMASK;
extern FlagGG_API const UInt32 DEFAULT_SHADOWMASK;
extern FlagGG_API const UInt32 DEFAULT_PROBEMASK;
